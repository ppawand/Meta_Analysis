mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = mbc,
method = "ML")
summary(mod.mbc)
##################
# Bacterial Biomass
#################
bacteria <- mbiomass %>% filter(variable == "Bacteria")
mod.bacteria <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = bacteria,
method = "ML")
summary(mod.bacteria)
###########################
# Fungal Biomass
###########################
fungi <- mbiomass %>% filter(variable == "Fungi")
best.model.fungi <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = fungi,
method = "ML")
summary(best.model.fungi)
###########################
# Gram positive bacteria
###########################
Gpos.bacteria <- mbiomass %>% filter(variable == "Gram Positive Bacteria")
best.model.Gpos <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = Gpos.bacteria,
method = "ML")
summary(best.model.Gpos)
###########################
# Gram negative bacteria
###########################
Gneg.bacteria <- mbiomass %>% filter(variable == "Gram Negative Bacteria")
best.model.Gneg <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = Gneg.bacteria,
method = "ML")
summary(best.model.Gneg)
#######################
# total biomass
#####################
total.mbiomass <- mbiomass %>% filter(variable == "Total Microbial Biomass")
best.model.total.biomass <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = total.mbiomass,
method = "ML")
summary(best.model.total.biomass)
##################################################################
# activity
##################################################################
mfunction <- read_excel("~/Desktop/MetaData.xlsx", sheet = 2)
mfunction <- mfunction %>% select(studyID, trt, map, mat, ahm, ph, ecosystem,
Warming.technique, magnitude, duration, deg.duration,
LRR, var, weight.adjusted,
variable)
mfunction[c("studyID", "ecosystem", "Warming.technique")] <-
lapply(mfunction[c("studyID","ecosystem", "Warming.technique")], factor)
############################
# variable importance
###########################
var_importance(mfunction)
total.respiration <- mfunction %>% filter(variable == "Total respiration")
best.model.total.respiration <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = total.respiration,
method = "ML")
summary(best.model.total.respiration)
microbial.respiration <- mfunction %>% filter(variable == "Microbial respiration")
best.model.microbial.respiration <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = microbial.respiration,
method = "ML")
summary(best.model.microbial.respiration)
beta.glucosidase <- mfunction %>% filter(variable == "BG")
best.model.beta.glucosidase <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = beta.glucosidase,
method = "ML")
summary(best.model.beta.glucosidase)
cellobiohydrolase <- mfunction %>% filter(variable == "CBH")
best.model.cellobiohydrolase <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = cellobiohydrolase,
method = "ML")
summary(best.model.cellobiohydrolase)
nag <- mfunction %>% filter(variable == "NAG")
best.model.nag <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = nag,
method = "ML")
summary(best.model.nag)
beta.xylosidase <- mfunction %>% filter(variable == "BX")
best.model.beta.xylosidase <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = beta.xylosidase,
method = "ML")
summary(best.model.beta.xylosidase)
lap <- mfunction %>% filter(variable == "LAP")
best.model.lap <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = lap,
method = "ML")
summary(best.model.lap)
phenol.oxidase <- mfunction %>% filter(variable == "PHO")
best.model.phenol.oxidase <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = phenol.oxidase,
method = "ML")
summary(best.model.phenol.oxidase)
perooxidase <- mfunction %>% filter(variable == "PO")
best.model.perooxidase <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = perooxidase,
method = "ML")
summary(best.model.perooxidase)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
#####################################
# Bootstrap mean and CI function
#####################################
bootstrapmean <- function (df, variable = "x",iter = 5000, confprob = 0.95) {
x.mean <- mean(df[, variable], na.rm = T)
samplingDistrib <- numeric(iter)
for (i in 1 : iter) {
bootstrapped.sample <- sample (df[, variable], size = nrow(df), replace = T)
sampleDistrib[i] <- mean(bootstarpped.sample, na.rm = T)
}
quantile.low <- (1-confprob)/2
quantile.high <- 1-quantile.low
conf.interval <- quantile(sampleDistrib, probs = c(quantile.low, quantile.high))
return(data.frame(sample.mean = x.mean,
lower.ci <- conf.interval[[1]],
upper.ci <- conf.interval[[2]]))
}
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
View(data)
View(data)
bootstrapmean(df = data, variable = "variable")
bootstrapmean(df = data, variable = "adjusted.lnR")
View(data)
bootstrapmean(df = data, variable = "weighted.lnR")
mean(data[, "weighted.lnR"])
class(data)
mean(data[, weighted.lnR])
mean(data[, weighted.lnR])
mean(data[, weighted.lnR])
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
mean(data[, weighted.lnR])
mean(data$weighted.lnR)
mean(data$variable[, "Bacteria"])
data$variable[, "Bacteria"]
data$variable
data$variable[, "Fungi"]
data$variable["Fungi", ]
data[, "Fungi"]
data[, "variable"]
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 5000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating an empty data frame for storing results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
# perform bootstrapping
boot_mean <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_mean, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 5000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating an empty data frame for storing results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
# perform bootstrapping
boot_mean <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_mean, c(confprob/2, 1-confprob/2, na.rm = TRUE))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 1000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating an empty data frame for storing results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
# perform bootstrapping
boot_mean <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_mean, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
cat_data <- data[data[["ecosystem"]] == "Grassland", "weighted.lnR"]
View(cat_data)
boot_mean <- replicate(1000, mean(sample(cat_data, replace = TRUE)))
boot_sample <- sample(cat_data, size = nrow(cat_data), replace = TRUE)
View(boot_sample)
mean(boot_sample)
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 1000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating an empty data frame for storing results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
# perform bootstrapping
boot_sample <- sample(cat_data, size = nrow(cat_data), replace = TRUE)
ci <- quantile(boot_mean, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
cat_data <- data[data[[variable]] == bacteria, num_var]
cat_data <- data[data[[ecosystem]] == "Grassland", weighted.LRR]
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
View(data)
cat_data <- data[data[[ecosystem]] == "Grassland", weighted.LRR]
cat_data <- data[data[["ecosystem"]] == "Grassland", weighted.LRR]
cat_data <- data[data[["ecosystem"]] == "Grassland", weighted.lnR]
cat_data <- data[data[["ecosystem"]] == "Grassland", "weighted.lnR"]
View(cat_data)
boot_sample <- sample(cat_data, size = nrow(cat_data), replace = TRUE)
View(boot_sample)
View(cat_data)
replicate(1000, mean(sample(cat_data, replace = TRUE)))
replicate(1000, mean(sample(cat_data$weighted.lnR, replace = TRUE)))
cat_data <- as.vector(data[data[[cat_var]] == cat, num_var])
cat_data <- as.vector(data[data[["ecosystem"]] == "Grassland", "weighted.lnR"])
View(cat_data)
cat_data <- as.vector(data[data[["ecosystem"]] == "Grassland", "weighted.lnR"], mode = "numeric")
cat_data
View(cat_data)
cat_data <- data[data[["ecosystem"]] == "Grassland", "weighted.lnR"]
View(cat_data)
cat_data[, "weighted.lnR"]
class(cat_data[, "weighted.lnR"])
as.vector(cat_data[, "weighted.lnR"])
(cat_data[[, "weighted.lnR"]])
cat_data <- data[data[["ecosystem"]] == "Grassland", "weighted.lnR"]
View(cat_data)
cat_data[, "weighted.lnR"]
cat_data[, "weighted.lnR"]
pull(cat_data, "weighted.lnR")
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 1000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
cat_data <- pull(cat_data, num_var)
# perform bootstrapping
boot_sample <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_sample, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
data <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 1000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating empty data frame to store results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
cat_data <- pull(cat_data, num_var)
# perform bootstrapping
boot_sample <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_sample, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
#####################################
# Bootstrap mean and CI function
#####################################
bootstrap_mean_ci <- function (data, cat_var, num_var, nIter = 5000, confprob = 0.05) {
# get a unique values of categorical variable
cat_levels <- unique(data[[cat_var]])
# creating empty data frame to store results
results <- data.frame(category = character(),
mean = numeric(),
lower_ci = numeric(),
upper_ci = numeric())
for (cat in cat_levels) {
# subset data for a current category
cat_data <- data[data[[cat_var]] == cat, num_var]
cat_data <- pull(cat_data, num_var)
# perform bootstrapping
boot_sample <- replicate(nIter, mean(sample(cat_data, replace = TRUE)))
ci <- quantile(boot_sample, c(confprob/2, 1-confprob/2))
results <- rbind(results, data.frame(category = cat,
mean = mean(cat_data),
lower_ci = ci[1],
upper_ci = ci[2]))
}
return(results)
}
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "weighted.lnR")
bootstrap_mean_ci(data = data, cat_var = "ecosystem", num_var = "LRR")
##################
# overall effects
#################
warming_effects <- data %>% group_by(ecosystem) %>%
summarise(meaneffect = (sum(weighted.lnR * weight.adjusted) / sum(weight.adjusted)),
vari = 1/sum(weight.adjusted),
n = n(),
lower.ci = meaneffect - 1.96 * sqrt(vari),
upper.ci = meaneffect + 1.96 * sqrt (vari))
View(warming_effects)
##################
# data
##################
mbiomass <- read_excel("~/Desktop/MetaData.xlsx", sheet = 1)
mbiomass <- mbiomass %>% select(studyID, trt, map, mat, ahm, ph, ecosystem,
Warming.technique, magnitude, duration, deg.duration,
LRR, var, weight.adjusted, weighted.lnR,
variable)
mbiomass[c("studyID", "ecosystem", "Warming.technique")] <-
lapply(mbiomass[c("studyID","ecosystem", "Warming.technique")], factor)
sapply(mbiomass, class)
mbc <- mbiomass %>% filter(variable == "MBC")
bootstrap_mean_ci(data = mbc, cat_var = "ecosystem", num_var = "LRR")
##################
# Bacterial Biomass
#################
bacteria <- mbiomass %>% filter(variable == "Bacteria")
View(bacteria)
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "weighted.lnR")
mod.bacteria <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = bacteria,
method = "ML")
#################
# library
##################
library(ggplot2)
library(metafor)
library(dplyr)
library(tidyr)
library(readxl)
library(party)
mod.bacteria <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = bacteria,
method = "ML")
summary(mod.bacteria)
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "LRR")
View(best.model.fungi)
View(fungi)
best.model.fungi[["W"]]
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "LRR")
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "weighted.lnR")
##################
# overall effects
#################
warming_effects <- bacteria %>% group_by(ecosystem) %>%
summarise(meaneffect = (sum(weighted.lnR * weight.adjusted) / sum(weight.adjusted)),
vari = 1/sum(weight.adjusted),
n = n(),
lower.ci = meaneffect - 1.96 * sqrt(vari),
upper.ci = meaneffect + 1.96 * sqrt (vari))
View(warming_effects)
##################
# overall effects
#################
warming_effects <- bacteria %>% group_by(Warming.technique) %>%
summarise(meaneffect = (sum(weighted.lnR * weight.adjusted) / sum(weight.adjusted)),
vari = 1/sum(weight.adjusted),
n = n(),
lower.ci = meaneffect - 1.96 * sqrt(vari),
upper.ci = meaneffect + 1.96 * sqrt (vari))
View(warming_effects)
View(warming_effects)
warming_effects <- warming_effects %>% mutate(percent_change = ((exp(meaneffect) - 1) * 100))
View(warming_effects)
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "weighted.lnR")
bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "LRR")
mean_bacteria <- bootstrap_mean_ci(data = bacteria, cat_var = "Warming.technique", num_var = "LRR")
mean_bacteria %>% mutate(percent_change = ((exp(meaneffect) - 1) * 100))
mean_bacteria %>% mutate(percent_change = ((exp(mean) - 1) * 100))
mod.bacteria <- rma.mv(yi = LRR, V = var, W = weight.adjusted,
mods = ~ ecosystem + ph + ahm + Warming.technique +
magnitude + duration,
random = ~ 1 | studyID,
data = bacteria,
method = "ML")
summary(mod.bacteria)
##################
# overall effects
#################
warming_effects <- bacteria %>% group_by(Warming.technique) %>%
summarise(meaneffect = (sum(weighted.lnR) / sum(weight.adjusted)),
vari = 1/sum(weight.adjusted),
n = n(),
lower.ci = meaneffect - 1.96 * sqrt(vari),
upper.ci = meaneffect + 1.96 * sqrt (vari))
View(warming_effects)
